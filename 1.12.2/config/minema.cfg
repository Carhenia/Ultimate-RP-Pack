# Configuration file

##########################################################################################################
# capturing
#--------------------------------------------------------------------------------------------------------#
# Settings for video recording.
##########################################################################################################

capturing {
    # Width of every captured frame in pixels. Set to 0 to use the current window/display width. Non-zero values require framebuffer
    # support and are bound to the maximum texture resolution of your GPU.
    I:frameWidth=0

    # Height of every captured frame in pixels. Set to 0 to use the current window/display height. Non-zero values require framebuffer
    # support and are bound to the maximum texture resolution of your GPU.
    I:frameHeight=0

    # Recording frame rate, sets the amount of frames recorded per in-game second. Floating point values are allowed, e.g. 23.976 for
    # 24p NTSC. Because Minecraft operates at 20 ticks per second, frame rates with multiples of 20 are recommended for best
    # smoothness.
    D:frameRate=60.0

    # Number of frames to capture before stopping automatically. -1 means no limit.
    I:frameLimit=-1

    # Path were the captured videos are stored. If no absolute path is used, it's relative to the Minecraft working directory.
    S:capturePath=movies

    # If enabled, show additional capturing information on the overlay (F3 menu). Note that these information are visible in the
    # video, too.
    B:showOverlay=false

    # If enabled, the depth buffer is captured linearly. Warning: Certain tricks are not available for this buffer so this is quite
    # slow!
    B:captureDepth=false

    # If greater than 0, the depth capturing will adjust the depth according to this maximum value rather than Minecraft's render
    # distance
    D:captureDepthDistance=0.0

    # If disabled, the GUI (hotbar, hand, crosshair, etc) will not be recorded. It will be enabled force when Optifine Shaders is
    # enabled.
    B:recordGui=true

    # Enable to fix broken recordings when using optifine's antialiasing or fast render together with a custom resolution. Resizes the
    # whole application window as a workaround.
    B:aaFastRenderFix=false

    # When enabled, alpha channel will be sent to ffmpeg as well. In order to actually to appear, you need to use some mod features,
    # like Blockbuster's chroma sky feature with 0% opacity (or keying option of image or custom model morphs). This also doesn't work
    # with shaders, most of the times, as they ignore passing the alpha value (individual shader packs requires editing).
    B:useAlpha=false

    # This option allows you to hold a render frame for recording for specific time. It's only useful with shaders that support
    # path/ray tracing (like PTGI) or temporals (TAA) whose lighting takes a couple of render frames to catch up.
    I:heldFrames=1

    # Enable alpha in screenshots made by F2 keybind
    B:useAlphaScreenshot=false

    # Export frame data of One-Node Camera that can be pasted directly into After Effects, the coordinates in AE are the same as those
    # in the game. Note: The option "Measure Film Size" of camera in After Effects should be set to "Vertically", and other 3D layers
    # in After Effects need to be rotated 180 degrees around the X or Z axis.
    B:exportAECamera=false

    # Motion blur effect based on ffmpeg, only available when video encoding is enabled. The higher the quality of the blur, the
    # longer and more exponential the rendering time, High and Ultra are only recommended for footage with a lot of motion.
    S:motionBlurLevel=disable

    # Convert the image to linear color space for blurring to ensure the correctness of the blur result, which can seriously slow down
    # the export speed.
    B:motionBlurLinearMixing=true
}


##########################################################################################################
# encoding
#--------------------------------------------------------------------------------------------------------#
# Settings for video encoding.
##########################################################################################################

encoding {
    # If enabled, a video encoding program is used that will receive uncompressed BGR24 frames from Minema via the standard input
    # pipe.
    B:useVideoEncoder=true

    # Path to the video encoding executable. The encoder's working directory is the generated movie folder. Ignored if the video
    # encoder is disabled.
    S:videoEncoderPath=ffmpeg

    # Arguments for the video encoding program. Placeholders: %WIDTH% - frame width, %HEIGHT% - frame height, %FPS% - frame rate.
    # %NAME% - video file name to use. Ignored if the video encoder is disabled.
    S:videoEncoderParams=-f rawvideo -pix_fmt bgr24 -s %WIDTH%x%HEIGHT% -r %FPS% -i - -vf %DEFVF% -c:v libx264 -preset ultrafast -tune zerolatency -qp 18 -pix_fmt yuv420p %NAME%.mp4

    # Arguments for the video encoding program when 'Use alpha' option is enabled. Placeholders are the same. For PNG sequences, you
    # could use "-f rawvideo -pix_fmt rgb32 -s %WIDTH%x%HEIGHT% -r %FPS% -i - -vf vflip %NAME%_%s.png".
    S:videoEncoderParamsAlpha=-f rawvideo -pix_fmt rgb32 -s %WIDTH%x%HEIGHT% -r %FPS% -i - -vf %DEFVF% -c:v libx264 -preset ultrafast -tune zerolatency -qp 18 -pix_fmt yuv420p %NAME%_rgb.mp4 -vf %DEFVF%,format=rgb32,alphaextract,format=yuv420p %NAME%_alpha.mp4

    # Format error: Arguments for exporting the depth buffer when 'Use depth' option is enabled. Placeholders are the same. Example
    # arguments: 8 bits "-f rawvideo -pix_fmt bgr24 -s %WIDTH%x%HEIGHT% -r %FPS% -i - -vf %DEFVF% -c:v libx264 -preset ultrafast -tune
    # zerolatency -qp 6 -pix_fmt yuv420p %NAME%_depth.mp4",\n16 bits 4 channels "-f rawvideo -pix_fmt bgra64be -s %WIDTH%x%HEIGHT% -r
    # %FPS% -i - -vf %DEFVF% -preset ultrafast -tune zerolatency -qp 6 -pix_fmt bgra64be %NAME%_depth_%s.png",\n32 bits float "-f
    # rawvideo -pix_fmt gbrpf32be -s %WIDTH%x%HEIGHT% -r %FPS% -i - -vf %DEFVF% -preset ultrafast -tune zerolatency -qp 6 -compression
    # zip1 -pix_fmt gbrpf32le %NAME%_depth_%s.exr"
    S:videoEncoderParamsDepth=-f rawvideo -pix_fmt bgr48be -s %WIDTH%x%HEIGHT% -r %FPS% -i - -vf %DEFVF% -preset ultrafast -tune zerolatency -qp 6 -pix_fmt bgr48be %NAME%_depth_%d.png

    # The bit depth that should be used internally for the depth buffer. 16 bits with 4 channels saves the render distance or the
    # manually defined distance in the alpha channel. 32 bits saves the depth values multiplied with the render distance.
    S:depthBufferBitDepth=bit16channels3

    # Use motion blur in the depth buffer when motion blur is activated in the capturing settings. Motion blur in the depth buffer is
    # not very useful for masking, but useful for post process DOF.
    B:depthBufferMotionBlur=false

    # If necessary, snaps the recording resolution to the next lower resolution so that width and height is divisible by this modulus.
    # FFMpeg only needs mod2, some other encoders might need more.
    S:snapResolution=mod2

    # This option enables logging of ffmpeg encoding process by writing the output of process into a *.log file. Disabling this option
    # won't create the log files upon recording.
    B:enableEncoderLogging=true
}


##########################################################################################################
# engine
#--------------------------------------------------------------------------------------------------------#
# Advanced engine override settings used during recording.
##########################################################################################################

engine {
    # Speed modifier for the game clock. The default is 1.0, which equals 20 ticks per second. Lower or higher values will speed up or
    # slow down the game time. 2.5, for example, results in two and a half of the normal speed. Useful for slow motion or time lapse
    # effects. Ignored if the capturing is unsynchronized.
    D:engineSpeed=1.0

    # If enabled, the local server and client runs synchronously to the video capturing frame rate. This effectively turns Minecraft
    # into an offline renderer and allows rendering and capturing of extremely complex scenes. This ShaderSync version also
    # synchronizes the shader mod by karyonix (compatible with Optifine, too). ONLY WORKS ON LOCAL WORLDS! (This option already
    # includes Thread Synchronize and this option will be automatically enabled when exporting panoramic video.)
    B:syncEngine=true

    # Turn on thread synchronization in single player (not just in recording) as a way to reduce multi-threaded latency issues,
    # allowing some mods to run better (e.g. Aperture), but may cause lag.
    B:threadSync=false

    # Set the tick rate of the entity to the maximum.
    B:entitySync=true

    # If enabled, Minema will heavily accelerate the chunk loading rate during recording. THIS IS ONLY TRULY EFFECTIVE ON LOCAL
    # WORLDS!
    B:preloadChunks=true

    # If Preload Chunks is enabled and this is also enabled, all chunks in render distance will be preloaded. THIS IS ONLY TRULY
    # EFFECTIVE ON LOCAL WORLDS!
    B:forcePreloadChunks=false

    # Force the game to render off screen chunks. This option will be automatically enabled when exporting panoramic video.
    B:disableCulling=false

    # Automatically switch to this shaderpack when recording.
    S:shaderpack=

    # Modify the render distance when recording. Set to 0 will not modify the render distance.
    I:renderDistance=0

    # Use the in-game frame rate limit option to prevent the game from running faster. Only works when "Synchronize" is enabled
    B:limitFramerate=false
}


##########################################################################################################
# vr
#--------------------------------------------------------------------------------------------------------#
# Settings for panoramic video.
##########################################################################################################

vr {
    # Capture the video as 360 (Equirectangular Panoramic Video) video. Available only when the "Synchronize" is available
    B:enableVR=false

    # Inject spherical metadata to MP4 format panoramic video in order to facilitate the player and video website to identify the
    # video format, turn off this option if the exported panoramic video is always broken.
    B:injectMetadata=true

    # Ensure proper rendering of screen space effects by reserving upper and lower screen space, but it will significantly degrade the
    # image quality.
    B:vrSSRSupport=false
}


